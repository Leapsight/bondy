
#!/bin/bash
## =============================================================================
##  replaceosvars.sh - Takes a file and generates another file by substituting all
##  instances of variables i.e. the string ${VARNAME}, with the environment
##  variable value of the same variable name i.e. VARNAME.
##
##  Copyright (c) 2016-2019 Ngineo Limited t/a Leapsight. All rights reserved.
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##  http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.
## =============================================================================

usage() {
    echo "Usage: $0 [ -i INPUT_FILE ] [ -o OUTPUT_FILE ]" 1>&2
}

iflag=false
oflag=false

while getopts 'hi:o:' option; do
    case "${option}" in
        i )  iflag=true; input=${OPTARG};;
        o )  oflag=true; output=${OPTARG};;
        h )  usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        : )  echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        * )  echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

if ((OPTIND == 1)); then
    echo "No options specified"
fi

shift $((OPTIND -1))

if ! $iflag; then
    echo "The input file must be specified" >&2
    usage
    exit 1
fi

if ! $oflag; then
    # If output file was not provided we default to
    output="output_${input}"
fi

cp "${input}" "${output}"

# We find matches to ${VARNAME} returning one match per line
# By using the negated charset [^\$] we force it to return a single match
# per line even when it finds multiple variables per line
# We dedup using sort -u,
grep -E -o '\${[^\$]+}' ${output} | sort -u | while read -r match; do
    # We iterate over the matching terms
    # We remove the chars $, { and }, so that we extract the variable name
    var="$(echo "${match}" | sed -e 's/\$//g' -e 's/{//g' -e 's/}//g')";
    # Using {!var} does not work in zsh, we use eval that works in bash and zsh
    eval "checkset=\"\${$var+1}\"";
    if [ ${checkset} ]; then
        # Using {!var} does not work in zsh, we use eval
        eval "value=\"\${$var}\"";
        # The .bak extension parameter is required for this to work on macOS
        sed -i.bak "s/${match}/${value}/g" "${output}"
    else
        echo "The environment variable $var is unset."
        exit 1
    fi
done
